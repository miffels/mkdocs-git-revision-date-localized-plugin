{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-git-revision-date-localized-plugin MkDocs plugin that enables displaying the date of the last git modification of a page. The plugin uses babel and timeago.js to provide different localized date formats. Initial fork from mkdocs-git-revision-date-plugin . ( Example when used together with the mkdocs-material theme ) Setup Install the plugin using pip3 with the following command: pip3 install mkdocs-git-revision-date-localized-plugin Next, add the following lines to your mkdocs.yml : plugins : - search - git-revision-date-localized If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. If you use the mkdocs-material theme, you should already see the last revision on the bottom of your pages. Note when using build environments This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to: Change your CI settings github actions: set fetch_depth to 0 ( docs ) gitlab runners: set GIT_DEPTH to 0 ( docs ) bitbucket pipelines: set clone: depth: full ( docs ) Documentation See timvink.github.io/mkdocs-git-revision-date-localized-plugin . Contributing Contributions are very welcome! Please read CONTRIBUTING.md before putting in any work.","title":"Home"},{"location":"#mkdocs-git-revision-date-localized-plugin","text":"MkDocs plugin that enables displaying the date of the last git modification of a page. The plugin uses babel and timeago.js to provide different localized date formats. Initial fork from mkdocs-git-revision-date-plugin . ( Example when used together with the mkdocs-material theme )","title":"mkdocs-git-revision-date-localized-plugin"},{"location":"#setup","text":"Install the plugin using pip3 with the following command: pip3 install mkdocs-git-revision-date-localized-plugin Next, add the following lines to your mkdocs.yml : plugins : - search - git-revision-date-localized If you have no plugins entry in your config file yet, you'll likely also want to add the search plugin. MkDocs enables it by default if there is no plugins entry set. If you use the mkdocs-material theme, you should already see the last revision on the bottom of your pages.","title":"Setup"},{"location":"#note-when-using-build-environments","text":"This plugin needs access to the last commit that touched a specific file to be able to retrieve the date. By default many build environments only retrieve the last commit, which means you might need to: Change your CI settings github actions: set fetch_depth to 0 ( docs ) gitlab runners: set GIT_DEPTH to 0 ( docs ) bitbucket pipelines: set clone: depth: full ( docs )","title":"Note when using build environments"},{"location":"#documentation","text":"See timvink.github.io/mkdocs-git-revision-date-localized-plugin .","title":"Documentation"},{"location":"#contributing","text":"Contributions are very welcome! Please read CONTRIBUTING.md before putting in any work.","title":"Contributing"},{"location":"options/","text":"Options You can customize the plugin by setting options in mkdocs.yml . For example: plugins : - git-revision-date-localized : type : timeago timezone : Europe/Amsterdam locale : en fallback_to_build_date : false enable_creation_date : true exclude : - index.md type Default is date . To change the date format, set the type parameter to one of date , datetime , iso_date , iso_datetime or timeago . Example outputs: 28 November, 2019 # type: date (default) 28 November, 2019 13:57:28 # type: datetime 2019-11-28 # type: iso_date 2019-11-28 13:57:26 # type: iso_datetime 20 hours ago # type: timeago timezone Default is UTC . Specify a time zone database name ( reference ). This option is especially relevant when using type: datetime and type: iso_datetime . Note that when using timeago (with type: timeago ) any difference in time zones between server and client will be handled automatically. locale Default is None . Specify a two letter ISO639 language code to display dates in your preferred language. When not set, this plugin will look for locale or language options set in your theme. If also not set, the fallback is English ( en ) When used in combination with type: date or type: datetime , translation is done using babel which supports these locales When used in combination with type: timeago then timeago.js is added to your website, which supports these locales . If you specify a locale not supported by timeago.js, the fallback is English ( en ) Example outputs: 27 April, 2021 # `locale: en` with `type: date` (default) 27 April, 2021 13:11:28 # `locale: en` with `type: datetime` 2 weeks ago # `locale: en` with `type: timeago` 27 de marzo de 2021 # `locale: es` with `type: date` 27 de marzo de 2021 13:57:28 # `locale: es` with `type: datetime` hace 2 semanas # `locale: es` with `type: timeago` fallback_to_build_date Default is false . If set to true the plugin will use the time at mkdocs build instead of the file's last git revision date when git is not available . This means the revision date will be incorrect, but this can be acceptable if you want your project to also successfully build in environments with no access to GIT. enable_creation_date Default is false . If set to true , you will be able to use {{ git_creation_date_localized }} in markdown files and page.meta.git_creation_date_localized in page templates. not yet supported by Cmkdocs-material This feature was recently added, and native support for it has yet to be decided & implemented. See !50 for updates. You can add support manually as described in usage . exclude Default is empty. Specify a list of page source paths (one per line) that should not have a revision date included (excluded from processing by this plugin). This can be useful for example to remove the revision date from the front page. The source path of a page is relative to your docs/ folder. You can also use globs instead of full source paths. To exclude docs/subfolder/page.md specify in your mkdocs.yml a line under exclude: with - subfolder/page.md . Some examples: # mkdocs.yml plugins : - git-revision-date-localized : exclude : - index.md - subfolder/page.md - another_page.md - folder/*","title":"Options"},{"location":"options/#options","text":"You can customize the plugin by setting options in mkdocs.yml . For example: plugins : - git-revision-date-localized : type : timeago timezone : Europe/Amsterdam locale : en fallback_to_build_date : false enable_creation_date : true exclude : - index.md","title":"Options"},{"location":"options/#type","text":"Default is date . To change the date format, set the type parameter to one of date , datetime , iso_date , iso_datetime or timeago . Example outputs: 28 November, 2019 # type: date (default) 28 November, 2019 13:57:28 # type: datetime 2019-11-28 # type: iso_date 2019-11-28 13:57:26 # type: iso_datetime 20 hours ago # type: timeago","title":"type"},{"location":"options/#timezone","text":"Default is UTC . Specify a time zone database name ( reference ). This option is especially relevant when using type: datetime and type: iso_datetime . Note that when using timeago (with type: timeago ) any difference in time zones between server and client will be handled automatically.","title":"timezone"},{"location":"options/#locale","text":"Default is None . Specify a two letter ISO639 language code to display dates in your preferred language. When not set, this plugin will look for locale or language options set in your theme. If also not set, the fallback is English ( en ) When used in combination with type: date or type: datetime , translation is done using babel which supports these locales When used in combination with type: timeago then timeago.js is added to your website, which supports these locales . If you specify a locale not supported by timeago.js, the fallback is English ( en ) Example outputs: 27 April, 2021 # `locale: en` with `type: date` (default) 27 April, 2021 13:11:28 # `locale: en` with `type: datetime` 2 weeks ago # `locale: en` with `type: timeago` 27 de marzo de 2021 # `locale: es` with `type: date` 27 de marzo de 2021 13:57:28 # `locale: es` with `type: datetime` hace 2 semanas # `locale: es` with `type: timeago`","title":"locale"},{"location":"options/#fallback_to_build_date","text":"Default is false . If set to true the plugin will use the time at mkdocs build instead of the file's last git revision date when git is not available . This means the revision date will be incorrect, but this can be acceptable if you want your project to also successfully build in environments with no access to GIT.","title":"fallback_to_build_date"},{"location":"options/#enable_creation_date","text":"Default is false . If set to true , you will be able to use {{ git_creation_date_localized }} in markdown files and page.meta.git_creation_date_localized in page templates. not yet supported by Cmkdocs-material This feature was recently added, and native support for it has yet to be decided & implemented. See !50 for updates. You can add support manually as described in usage .","title":"enable_creation_date"},{"location":"options/#exclude","text":"Default is empty. Specify a list of page source paths (one per line) that should not have a revision date included (excluded from processing by this plugin). This can be useful for example to remove the revision date from the front page. The source path of a page is relative to your docs/ folder. You can also use globs instead of full source paths. To exclude docs/subfolder/page.md specify in your mkdocs.yml a line under exclude: with - subfolder/page.md . Some examples: # mkdocs.yml plugins : - git-revision-date-localized : exclude : - index.md - subfolder/page.md - another_page.md - folder/*","title":"exclude"},{"location":"usage/","text":"Usage In supported themes The following mkdocs themes have native support: mkdocs-material , see setup instructions for details. In markdown pages In your markdown files you can use the {{ git_revision_date_localized }} tag anywhere you'd like: Last update: {{ git_revision_date_localized }} In unsupported themes You can customize an existing theme by overriding blocks or partials and using the page.meta.git_revision_date_localized and/or page.meta.git_creation_date_localized tag(s). mkdocs theme To add a revision date to the default mkdocs theme, add a overrides/partials folder to your docs folder and update your mkdocs.yml file. Then you can extend the base mkdocs theme by adding a new file docs/overrides/content.html : mkdocs.yml theme: name: mkdocs custom_dir: docs/overrides docs/overrides/content.html <!-- Overwrites content.html base mkdocs theme, taken from https://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} {% if page.meta.git_revision_date_localized %} < small > Last update: {{ page.meta.git_revision_date_localized }} </ small > {% endif %} {% if page.meta.git_created_date_localized %} < small > Created: {{ page.meta.git_created_date_localized }} </ small > {% endif %} mkdocs-material theme mkdocs-material has native support for git_revision_date_localized , but not yet for git_created_date_localized . You can extend the mkdocs-material theme by adding overriding a partial as follows: mkdocs.yml theme: name: 'material' custom_dir: docs/overrides_material_theme docs/overrides/partials/source-date.html {% import \"partials/language.html\" as lang with context %} <!-- Last updated date --> {% set label = lang.t(\"source.revision.date\") %} < hr /> < div class = \"md-source-date\" > < small > <!-- mkdocs-git-revision-date-localized-plugin --> {% if page.meta.git_revision_date_localized %} {{ label }}: {{ page.meta.git_revision_date_localized }} {% if page.meta.git_creation_date_localized %} < br /> Created: {{ page.meta.git_creation_date_localized }} {% endif %} <!-- mkdocs-git-revision-date-plugin --> {% elif page.meta.revision_date %} {{ label }}: {{ page.meta.revision_date }} {% endif %} </ small > </ div > In custom themes When writing your own custom themes you can use the page.meta.git_revision_date_localized jinja tag, like so for example: {% if page.meta.git_revision_date_localized %} Last update: {{ page.meta.git_revision_date_localized }} {% endif %} Custom styling You can style the output using CSS, for example by including extra css to your mkdocs site. The date outputs are always wrapped in span elements with the classes git-revision-date-localized-plugin and git-revision-date-localized-plugin-{type} (where {type} is replaced with the type option set in the plugin). Here's an example: mkdocs.yml extra_css : css/extra.css docs/css/extra.css . git-revision-date-localized-plugin { color : red ; }","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#in-supported-themes","text":"The following mkdocs themes have native support: mkdocs-material , see setup instructions for details.","title":"In supported themes"},{"location":"usage/#in-markdown-pages","text":"In your markdown files you can use the {{ git_revision_date_localized }} tag anywhere you'd like: Last update: {{ git_revision_date_localized }}","title":"In markdown pages"},{"location":"usage/#in-unsupported-themes","text":"You can customize an existing theme by overriding blocks or partials and using the page.meta.git_revision_date_localized and/or page.meta.git_creation_date_localized tag(s).","title":"In unsupported themes"},{"location":"usage/#mkdocs-theme","text":"To add a revision date to the default mkdocs theme, add a overrides/partials folder to your docs folder and update your mkdocs.yml file. Then you can extend the base mkdocs theme by adding a new file docs/overrides/content.html : mkdocs.yml theme: name: mkdocs custom_dir: docs/overrides docs/overrides/content.html <!-- Overwrites content.html base mkdocs theme, taken from https://github.com/mkdocs/mkdocs/blob/master/mkdocs/themes/mkdocs/content.html --> {% if page.meta.source %} < div class = \"source-links\" > {% for filename in page.meta.source %} < span class = \"label label-primary\" > {{ filename }} </ span > {% endfor %} </ div > {% endif %} {{ page.content }} {% if page.meta.git_revision_date_localized %} < small > Last update: {{ page.meta.git_revision_date_localized }} </ small > {% endif %} {% if page.meta.git_created_date_localized %} < small > Created: {{ page.meta.git_created_date_localized }} </ small > {% endif %}","title":"mkdocs theme"},{"location":"usage/#mkdocs-material-theme","text":"mkdocs-material has native support for git_revision_date_localized , but not yet for git_created_date_localized . You can extend the mkdocs-material theme by adding overriding a partial as follows: mkdocs.yml theme: name: 'material' custom_dir: docs/overrides_material_theme docs/overrides/partials/source-date.html {% import \"partials/language.html\" as lang with context %} <!-- Last updated date --> {% set label = lang.t(\"source.revision.date\") %} < hr /> < div class = \"md-source-date\" > < small > <!-- mkdocs-git-revision-date-localized-plugin --> {% if page.meta.git_revision_date_localized %} {{ label }}: {{ page.meta.git_revision_date_localized }} {% if page.meta.git_creation_date_localized %} < br /> Created: {{ page.meta.git_creation_date_localized }} {% endif %} <!-- mkdocs-git-revision-date-plugin --> {% elif page.meta.revision_date %} {{ label }}: {{ page.meta.revision_date }} {% endif %} </ small > </ div >","title":"mkdocs-material theme"},{"location":"usage/#in-custom-themes","text":"When writing your own custom themes you can use the page.meta.git_revision_date_localized jinja tag, like so for example: {% if page.meta.git_revision_date_localized %} Last update: {{ page.meta.git_revision_date_localized }} {% endif %}","title":"In custom themes"},{"location":"usage/#custom-styling","text":"You can style the output using CSS, for example by including extra css to your mkdocs site. The date outputs are always wrapped in span elements with the classes git-revision-date-localized-plugin and git-revision-date-localized-plugin-{type} (where {type} is replaced with the type option set in the plugin). Here's an example: mkdocs.yml extra_css : css/extra.css docs/css/extra.css . git-revision-date-localized-plugin { color : red ; }","title":"Custom styling"}]}